// Copyright 2021 VMware, Inc.
// SPDX-License-Identifier: Apache-2.0

package schema

import (
	"fmt"
	"sort"

	"carvel.dev/ytt/pkg/yamlmeta"
)

// JSONSchemaDocument holds the document type used for creating an JSON Schema document
type JSONSchemaDocument struct {
	OpenAPIDocument
}

// NewJSONSchemaDocument creates an instance of an OpenAPIDocument based on the given DocumentType
func NewJSONSchemaDocument(docType *DocumentType) *JSONSchemaDocument {
	return &JSONSchemaDocument{*NewOpenAPIDocument(docType)}
}

// AsDocument generates a new AST of this OpenAPI v3.0.x document, populating the `schemas:` section with the
// type information contained in `docType`.
func (j *JSONSchemaDocument) AsDocument() *yamlmeta.Document {
	openAPIProperties := j.calculateProperties(j.docType)

	openAPIProperties.Items = append(
		[]*yamlmeta.MapItem{
			{Key: "$schema", Value: "https://json-schema.org/draft/2020-12/schema"},
			{Key: "$id", Value: "https://example.biz/schema/ytt/data-values.json"},
			{Key: "description", Value: "Schema for data values, generated by ytt"},
		},
		openAPIProperties.Items...,
	)

	return &yamlmeta.Document{Value: openAPIProperties}
}

func (j *JSONSchemaDocument) calculateProperties(schemaVal interface{}) *yamlmeta.Map {
	switch typedValue := schemaVal.(type) {
	case *DocumentType:
		return j.calculateProperties(typedValue.GetValueType())
	case *MapType:
		var items openAPIKeys
		items = append(items, collectDocumentation(typedValue)...)
		items = append(items, &yamlmeta.MapItem{Key: typeProp, Value: &yamlmeta.Array{Items: []*yamlmeta.ArrayItem{{Value: "object"}}}})
		items = append(items, &yamlmeta.MapItem{Key: additionalPropsProp, Value: false})

		var properties []*yamlmeta.MapItem
		for _, i := range typedValue.Items {
			mi := yamlmeta.MapItem{Key: i.Key, Value: j.calculateProperties(i.GetValueType())}
			properties = append(properties, &mi)
		}
		items = append(items, &yamlmeta.MapItem{Key: propertiesProp, Value: &yamlmeta.Map{Items: properties}})

		sort.Sort(items)
		return &yamlmeta.Map{Items: items}
	case *ArrayType:
		var items openAPIKeys
		items = append(items, collectDocumentation(typedValue)...)

		items = append(items, &yamlmeta.MapItem{Key: typeProp, Value: &yamlmeta.Array{Items: []*yamlmeta.ArrayItem{{Value: "array"}}}})
		items = append(items, &yamlmeta.MapItem{Key: defaultProp, Value: typedValue.GetDefaultValue()})

		valueType := typedValue.GetValueType().(*ArrayItemType)
		properties := j.calculateProperties(valueType.GetValueType())
		items = append(items, &yamlmeta.MapItem{Key: itemsProp, Value: properties})

		sort.Sort(items)
		return &yamlmeta.Map{Items: items}
	case *ScalarType:
		var items openAPIKeys
		items = append(items, collectDocumentation(typedValue)...)
		items = append(items, &yamlmeta.MapItem{Key: defaultProp, Value: typedValue.GetDefaultValue()})

		typeString := j.openAPITypeFor(typedValue)

		items = append(items, &yamlmeta.MapItem{Key: typeProp, Value: &yamlmeta.Array{Items: []*yamlmeta.ArrayItem{{Value: typeString}}}})

		items = append(items, convertValidations(typedValue.GetValidationMap())...)

		if typedValue.String() == "float" {
			items = append(items, &yamlmeta.MapItem{Key: formatProp, Value: "float"})
		}

		sort.Sort(items)
		return &yamlmeta.Map{Items: items}
	case *NullType:
		var items openAPIKeys
		items = append(items, collectDocumentation(typedValue)...)

		properties := j.calculateProperties(typedValue.GetValueType())
		// we need to append the "null" type to the list of types
		for i := 0; i < len(properties.Items); i++ {
			if properties.Items[i].Key == "type" {
				typeItem := properties.Items[i]
				// in json schema nullable is represented as an array of types with "null" (as a string!) as one of the types
				typeItem.Value.(*yamlmeta.Array).Items = append(typeItem.Value.(*yamlmeta.Array).Items, &yamlmeta.ArrayItem{Value: "null"})

				items = append(items, typeItem)
			} else {
				items = append(items, properties.Items[i])
			}
		}

		sort.Sort(items)
		return &yamlmeta.Map{Items: items}
	case *AnyType:
		var items openAPIKeys
		items = append(items, collectDocumentation(typedValue)...)
		// AnyType must allow all value types, and need to explicitly list them for json schema
		items = append(items, &yamlmeta.MapItem{Key: typeProp,
			Value: &yamlmeta.Array{Items: []*yamlmeta.ArrayItem{
				{Value: "null"},
				{Value: "string"},
				{Value: "number"},
				{Value: "object"},
				{Value: "array"},
				{Value: "boolean"},
			}},
		})
		items = append(items, &yamlmeta.MapItem{Key: defaultProp, Value: typedValue.GetDefaultValue()})

		sort.Sort(items)
		return &yamlmeta.Map{Items: items}
	default:
		panic(fmt.Sprintf("Unrecognized type %T", schemaVal))
	}
}
