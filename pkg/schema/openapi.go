// Copyright 2021 VMware, Inc.
// SPDX-License-Identifier: Apache-2.0

package schema

import (
	"fmt"

	"github.com/k14s/ytt/pkg/yamlmeta"
)

// keys used when generating an OpenAPI Document
const (
	typeProp               = "type"
	defaultProp            = "default"
	nullableProp           = "nullable"
	descriptionProp        = "description"
	exampleProp            = "example"
	exampleDescriptionProp = "x-example-description"
	titleProp              = "title"
)

// OpenAPIDocument holds the document type used for creating an OpenAPI document
type OpenAPIDocument struct {
	docType *DocumentType
}

// NewOpenAPIDocument creates an instance of an OpenAPIDocument based on the given DocumentType
func NewOpenAPIDocument(docType *DocumentType) *OpenAPIDocument {
	return &OpenAPIDocument{docType}
}

// AsDocument generates a new AST of this OpenAPI v3.0.x document, populating the `schemas:` section with the
// type information contained in `docType`.
func (o *OpenAPIDocument) AsDocument() *yamlmeta.Document {
	openAPIProperties := o.calculateProperties(o.docType)

	return &yamlmeta.Document{Value: &yamlmeta.Map{Items: []*yamlmeta.MapItem{
		{Key: "openapi", Value: "3.0.0"},
		{Key: "info", Value: &yamlmeta.Map{Items: []*yamlmeta.MapItem{
			{Key: "version", Value: "0.1.0"},
			{Key: "title", Value: "Schema for data values, generated by ytt"},
		}}},
		{Key: "paths", Value: &yamlmeta.Map{}},
		{Key: "components", Value: &yamlmeta.Map{Items: []*yamlmeta.MapItem{
			{Key: "schemas", Value: &yamlmeta.Map{Items: []*yamlmeta.MapItem{
				{Key: "dataValues", Value: openAPIProperties},
			}}},
		}}},
	}}}
}

func (o *OpenAPIDocument) calculateProperties(schemaVal interface{}) *yamlmeta.Map {
	switch typedValue := schemaVal.(type) {
	case *DocumentType:
		return o.calculateProperties(typedValue.GetValueType())
	case *MapType:
		var properties []*yamlmeta.MapItem
		for _, i := range typedValue.Items {
			mi := yamlmeta.MapItem{Key: i.Key, Value: o.calculateProperties(i.GetValueType())}
			properties = append(properties, &mi)
		}
		property := yamlmeta.Map{Items: collectDocumentation(typedValue)}
		property.Items = append(property.Items, &yamlmeta.MapItem{Key: typeProp, Value: "object"})
		property.Items = append(property.Items, &yamlmeta.MapItem{Key: "additionalProperties", Value: false})
		property.Items = append(property.Items, &yamlmeta.MapItem{Key: "properties", Value: &yamlmeta.Map{Items: properties}})
		return &property
	case *ArrayType:
		valueType := typedValue.GetValueType().(*ArrayItemType)
		properties := o.calculateProperties(valueType.GetValueType())
		property := yamlmeta.Map{Items: collectDocumentation(typedValue)}

		property.Items = append(property.Items, &yamlmeta.MapItem{Key: typeProp, Value: "array"})
		property.Items = append(property.Items, &yamlmeta.MapItem{Key: "items", Value: properties})
		property.Items = append(property.Items, &yamlmeta.MapItem{Key: defaultProp, Value: typedValue.GetDefaultValue()})
		return &property
	case *ScalarType:
		typeString := o.openAPITypeFor(typedValue)
		defaultVal := typedValue.GetDefaultValue()
		property := yamlmeta.Map{Items: collectDocumentation(typedValue)}
		property.Items = append(property.Items, &yamlmeta.MapItem{Key: typeProp, Value: typeString})
		property.Items = append(property.Items, &yamlmeta.MapItem{Key: defaultProp, Value: defaultVal})
		if typedValue.String() == "float" {
			property.Items = append(property.Items, &yamlmeta.MapItem{Key: "format", Value: "float"})
		}
		return &property
	case *NullType:
		properties := &yamlmeta.Map{Items: collectDocumentation(typedValue)}
		properties.Items = append(properties.Items, o.calculateProperties(typedValue.GetValueType()).Items...)
		properties.Items = append(properties.Items, &yamlmeta.MapItem{Key: nullableProp, Value: true})
		return properties
	case *AnyType:
		properties := &yamlmeta.Map{Items: collectDocumentation(typedValue)}
		properties.Items = append(properties.Items, &yamlmeta.MapItem{Key: nullableProp, Value: true})
		properties.Items = append(properties.Items, &yamlmeta.MapItem{Key: defaultProp, Value: typedValue.GetDefaultValue()})
		return properties
	default:
		panic(fmt.Sprintf("Unrecognized type %T", schemaVal))
	}
}

func collectDocumentation(t Type) []*yamlmeta.MapItem {
	var annDocumentation []*yamlmeta.MapItem
	if t.GetTitle() != "" {
		annDocumentation = append(annDocumentation, &yamlmeta.MapItem{Key: titleProp, Value: t.GetTitle()})
	}
	if t.GetDescription() != "" {
		annDocumentation = append(annDocumentation, &yamlmeta.MapItem{Key: descriptionProp, Value: t.GetDescription()})
	}
	ex := t.GetExample()
	if ex != nil {
		annDocumentation = append(annDocumentation, &yamlmeta.MapItem{Key: exampleDescriptionProp, Value: ex.description})
		annDocumentation = append(annDocumentation, &yamlmeta.MapItem{Key: exampleProp, Value: ex.example})
	}
	return annDocumentation
}

func (o *OpenAPIDocument) openAPITypeFor(astType *ScalarType) string {
	switch astType.ValueType {
	case StringType:
		return "string"
	case FloatType:
		return "number"
	case IntType:
		return "integer"
	case BoolType:
		return "boolean"
	default:
		panic(fmt.Sprintf("Unrecognized type: %T", astType.ValueType))
	}
}
